{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-trading-signal.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent that generates trading signals and market analysis.\n *\n * - generateTradingSignal - A function that generates trading signals and market analysis.\n * - GenerateTradingSignalInput - The input type for the generateTradingSignal function.\n * - GenerateTradingSignalOutput - The return type for the generateTradingSignal function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport { getKlineData, getOrderBookData, getRecentTradesData } from '@/lib/actions';\n\nconst GenerateTradingSignalInputSchema = z.object({\n  symbol: z.string().describe('The trading symbol (e.g., BTCUSDT).'),\n  timeframe: z.string().describe('The timeframe for the chart and data (e.g., 1m, 5m, 1h, 1d).'),\n});\nexport type GenerateTradingSignalInput = z.infer<typeof GenerateTradingSignalInputSchema>;\n\nconst GenerateTradingSignalOutputSchema = z.object({\n  analysis: z.string().describe('The market analysis and potential trading signal.'),\n});\nexport type GenerateTradingSignalOutput = z.infer<typeof GenerateTradingSignalOutputSchema>;\n\nexport async function generateTradingSignal(input: GenerateTradingSignalInput): Promise<GenerateTradingSignalOutput> {\n  return generateTradingSignalFlow(input);\n}\n\nconst tradingSignalPrompt = ai.definePrompt({\n  name: 'tradingSignalPrompt',\n  input: {schema: z.object({\n    symbol: z.string(),\n    timeframe: z.string(),\n    klineData: z.string(),\n    orderBook: z.string(),\n    recentTrades: z.string(),\n  })},\n  output: {schema: GenerateTradingSignalOutputSchema},\n  system: `You are a world-class AI financial advisor. Analyze the market data for the given symbol and timeframe, and generate a potential trading signal.\n  \n  Your analysis should include:\n  1. A clear trend prediction (e.g., Bullish, Bearish, Neutral) based on the kline data.\n  2. An analysis of the order book sentiment (e.g., \"Significant buy pressure noted\", \"Sell walls are forming\").\n  3. Identification of key support and resistance levels from the order book.\n  4. A concise trading signal (e.g., \"Potential long entry\", \"Consider short position\", \"Hold and observe\") based on all available data.\n\n  Respond using markdown. Always include a risk warning.`,\n  prompt: `Analyze the market for symbol {{{symbol}}} on the {{{timeframe}}} timeframe. \n\n  Here is the latest data:\n  - Candlestick (Kline) data:\n  {{{klineData}}}\n\n  - Order Book:\n  {{{orderBook}}}\n\n  - Recent Trades:\n  {{{recentTrades}}}\n\n  Provide a trend prediction, order book analysis, support/resistance levels, and a trading signal.\n`,\n});\n\nconst generateTradingSignalFlow = ai.defineFlow(\n  {\n    name: 'generateTradingSignalFlow',\n    inputSchema: GenerateTradingSignalInputSchema,\n    outputSchema: GenerateTradingSignalOutputSchema,\n  },\n  async input => {\n    const [klineData, orderBook, recentTrades] = await Promise.all([\n        getKlineData(input.symbol, input.timeframe),\n        getOrderBookData(input.symbol),\n        getRecentTradesData(input.symbol)\n    ]);\n\n    const {output} = await tradingSignalPrompt({\n      ...input,\n      klineData: JSON.stringify(klineData),\n      orderBook: JSON.stringify(orderBook),\n      recentTrades: JSON.stringify(recentTrades),\n    });\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC1C,MAAM;IACN,OAAO;QAAC,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACvB,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM;YAChB,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM;YACnB,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM;YACnB,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM;YACnB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;QACxB;IAAE;IACF,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;wDAQ6C,CAAC;IACvD,QAAQ,CAAC;;;;;;;;;;;;;AAaX,CAAC;AACD;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,CAAC,WAAW,WAAW,aAAa,GAAG,MAAM,QAAQ,GAAG,CAAC;QAC3D,CAAA,GAAA,qHAAA,CAAA,eAAY,AAAD,EAAE,MAAM,MAAM,EAAE,MAAM,SAAS;QAC1C,CAAA,GAAA,qHAAA,CAAA,mBAAgB,AAAD,EAAE,MAAM,MAAM;QAC7B,CAAA,GAAA,qHAAA,CAAA,sBAAmB,AAAD,EAAE,MAAM,MAAM;KACnC;IAED,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,oBAAoB;QACzC,GAAG,KAAK;QACR,WAAW,KAAK,SAAS,CAAC;QAC1B,WAAW,KAAK,SAAS,CAAC;QAC1B,cAAc,KAAK,SAAS,CAAC;IAC/B;IACA,OAAO;AACT;;;IA3DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/bybit-api.ts"],"sourcesContent":["'use server';\n\nexport type TickerInfo = {\n  highPrice24h: string;\n  lowPrice24h: string;\n  turnover24h: string; // Volume in quote currency (USDT)\n  volume24h: string; // Volume in base currency (e.g., BTC)\n};\n\nexport type OrderBookEntry = [string, string]; // [price, size]\n\nexport type OrderBook = {\n  bids: OrderBookEntry[];\n  asks: OrderBookEntry[];\n};\n\nexport type RecentTrade = {\n  execTime: number;\n  price: string;\n  qty: string;\n  side: 'Buy' | 'Sell';\n};\n\nexport type KlineEntry = [\n  string, // Start time\n  string, // Open\n  string, // High\n  string, // Low\n  string, // Close\n  string, // Volume\n  string  // Turnover\n]\n\nconst BYBIT_API_URL = 'https://api.bybit.com';\n\nasync function fetchFromBybit(endpoint: string, params: Record<string, string> = {}) {\n  const url = new URL(endpoint, BYBIT_API_URL);\n  url.search = new URLSearchParams(params).toString();\n  try {\n    const response = await fetch(url.toString(), { cache: 'no-store' });\n    if (!response.ok) {\n      throw new Error(`Bybit API error: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.retCode !== 0) {\n      throw new Error(`Bybit API error: ${data.retMsg}`);\n    }\n    return data.result;\n  } catch (error) {\n    console.error(`Failed to fetch from Bybit endpoint ${endpoint}:`, error);\n    throw error;\n  }\n}\n\nexport async function getTicker(symbol: string): Promise<TickerInfo | null> {\n  try {\n    const result = await fetchFromBybit('/v5/market/tickers', { category: 'spot', symbol });\n    if (result.list && result.list.length > 0) {\n      return result.list[0];\n    }\n    return null;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getOrderBook(symbol: string): Promise<OrderBook | null> {\n  try {\n    // Limit to 20 levels for a cleaner view\n    const result = await fetchFromBybit('/v5/market/orderbook', { category: 'spot', symbol, limit: '20' });\n    return {\n      bids: result.b,\n      asks: result.a,\n    };\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getRecentTrades(symbol: string): Promise<RecentTrade[] | null> {\n  try {\n    // Limit to 20 trades\n    const result = await fetchFromBybit('/v5/market/recent-trade', { category: 'spot', symbol, limit: '20' });\n    return result.list;\n  } catch (error) {\n    return null;\n  }\n}\n\nexport async function getKline(symbol: string, interval: string): Promise<KlineEntry[] | null> {\n    try {\n        const bybitInterval = interval === '1d' ? 'D' : interval.replace('h', '');\n        const result = await fetchFromBybit('/v5/market/kline', { category: 'spot', symbol, interval: bybitInterval, limit: '100' });\n        return result.list;\n    } catch(error) {\n        return null;\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAiCA,MAAM,gBAAgB;AAEtB,eAAe,eAAe,QAAgB,EAAE,SAAiC,CAAC,CAAC;IACjF,MAAM,MAAM,IAAI,IAAI,UAAU;IAC9B,IAAI,MAAM,GAAG,IAAI,gBAAgB,QAAQ,QAAQ;IACjD,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,IAAI,QAAQ,IAAI;YAAE,OAAO;QAAW;QACjE,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,SAAS,UAAU,EAAE;QAC3D;QACA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,IAAI,KAAK,OAAO,KAAK,GAAG;YACtB,MAAM,IAAI,MAAM,CAAC,iBAAiB,EAAE,KAAK,MAAM,EAAE;QACnD;QACA,OAAO,KAAK,MAAM;IACpB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,CAAC,oCAAoC,EAAE,SAAS,CAAC,CAAC,EAAE;QAClE,MAAM;IACR;AACF;AAEO,eAAe,UAAU,MAAc;IAC5C,IAAI;QACF,MAAM,SAAS,MAAM,eAAe,sBAAsB;YAAE,UAAU;YAAQ;QAAO;QACrF,IAAI,OAAO,IAAI,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,GAAG;YACzC,OAAO,OAAO,IAAI,CAAC,EAAE;QACvB;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,aAAa,MAAc;IAC/C,IAAI;QACF,wCAAwC;QACxC,MAAM,SAAS,MAAM,eAAe,wBAAwB;YAAE,UAAU;YAAQ;YAAQ,OAAO;QAAK;QACpG,OAAO;YACL,MAAM,OAAO,CAAC;YACd,MAAM,OAAO,CAAC;QAChB;IACF,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,gBAAgB,MAAc;IAClD,IAAI;QACF,qBAAqB;QACrB,MAAM,SAAS,MAAM,eAAe,2BAA2B;YAAE,UAAU;YAAQ;YAAQ,OAAO;QAAK;QACvG,OAAO,OAAO,IAAI;IACpB,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,SAAS,MAAc,EAAE,QAAgB;IAC3D,IAAI;QACA,MAAM,gBAAgB,aAAa,OAAO,MAAM,SAAS,OAAO,CAAC,KAAK;QACtE,MAAM,SAAS,MAAM,eAAe,oBAAoB;YAAE,UAAU;YAAQ;YAAQ,UAAU;YAAe,OAAO;QAAM;QAC1H,OAAO,OAAO,IAAI;IACtB,EAAE,OAAM,OAAO;QACX,OAAO;IACX;AACJ;;;IA3CsB;IAYA;IAaA;IAUA;;AAnCA,+OAAA;AAYA,+OAAA;AAaA,+OAAA;AAUA,+OAAA","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { generateTradingSignal } from '@/ai/flows/generate-trading-signal';\nimport { getTicker, getOrderBook, getRecentTrades, getKline } from '@/lib/bybit-api';\n\nexport async function getAiTradingSignal(symbol: string, timeframe: string) {\n  try {\n    const result = await generateTradingSignal({ symbol, timeframe });\n    return { success: true, analysis: result.analysis };\n  } catch (error) {\n    console.error('Error generating AI trading signal:', error);\n    return { success: false, error: 'Failed to generate AI signal. Please try again.' };\n  }\n}\n\nexport async function getMarketData(symbol: string) {\n    return getTicker(symbol);\n}\n\nexport async function getOrderBookData(symbol: string) {\n    return getOrderBook(symbol);\n}\n\nexport async function getRecentTradesData(symbol: string) {\n    return getRecentTrades(symbol);\n}\n\nexport async function getKlineData(symbol: string, interval: string) {\n    return getKline(symbol, interval);\n}\n"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;;;;;;AAEO,eAAe,mBAAmB,MAAc,EAAE,SAAiB;IACxE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;YAAE;YAAQ;QAAU;QAC/D,OAAO;YAAE,SAAS;YAAM,UAAU,OAAO,QAAQ;QAAC;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO;YAAE,SAAS;YAAO,OAAO;QAAkD;IACpF;AACF;AAEO,eAAe,cAAc,MAAc;IAC9C,OAAO,CAAA,GAAA,0HAAA,CAAA,YAAS,AAAD,EAAE;AACrB;AAEO,eAAe,iBAAiB,MAAc;IACjD,OAAO,CAAA,GAAA,0HAAA,CAAA,eAAY,AAAD,EAAE;AACxB;AAEO,eAAe,oBAAoB,MAAc;IACpD,OAAO,CAAA,GAAA,0HAAA,CAAA,kBAAe,AAAD,EAAE;AAC3B;AAEO,eAAe,aAAa,MAAc,EAAE,QAAgB;IAC/D,OAAO,CAAA,GAAA,0HAAA,CAAA,WAAQ,AAAD,EAAE,QAAQ;AAC5B;;;IAxBsB;IAUA;IAIA;IAIA;IAIA;;AAtBA,+OAAA;AAUA,+OAAA;AAIA,+OAAA;AAIA,+OAAA;AAIA,+OAAA","debugId":null}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getMarketData as '40ecf96ec3829da1facb2822b20b7b6fb2faedc074'} from 'ACTIONS_MODULE0'\nexport {getOrderBookData as '404bceabf4524442855236b92fdc7049a3e2aa0d9e'} from 'ACTIONS_MODULE0'\nexport {getRecentTradesData as '40546c427da191d85510109d8d2a81504e9cfe5350'} from 'ACTIONS_MODULE0'\nexport {getAiTradingSignal as '60c6125dbbad3595350503c517b30b35b439281e36'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 574, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 588, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 602, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}