{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-trading-signal.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent that generates trading signals and market analysis.\n *\n * - generateTradingSignal - A function that generates trading signals and market analysis.\n * - GenerateTradingSignalInput - The input type for the generateTradingSignal function.\n * - GenerateTradingSignalOutput - The return type for the generateTradingSignal function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateTradingSignalInputSchema = z.object({\n  symbol: z.string().describe('The trading symbol (e.g., BTCUSDT).'),\n  timeframe: z.string().describe('The timeframe for the chart and data (e.g., 1m, 5m, 1h, 1d).'),\n});\nexport type GenerateTradingSignalInput = z.infer<typeof GenerateTradingSignalInputSchema>;\n\nconst GenerateTradingSignalOutputSchema = z.object({\n  analysis: z.string().describe('The market analysis and potential trading signal.'),\n});\nexport type GenerateTradingSignalOutput = z.infer<typeof GenerateTradingSignalOutputSchema>;\n\nexport async function generateTradingSignal(input: GenerateTradingSignalInput): Promise<GenerateTradingSignalOutput> {\n  return generateTradingSignalFlow(input);\n}\n\nconst search = ai.defineTool(\n  {\n    name: 'search',\n    description: 'Tool to search the web for current events.',\n    inputSchema: z.object({\n      query: z.string().describe('The search query.'),\n    }),\n    outputSchema: z.string(),\n  },\n  async input => {\n    // Placeholder implementation for the search tool.\n    // In a real application, this would call an external search API.\n    return `Search results for ${input.query}: [Placeholder Search Results]`;\n  }\n);\n\nconst tradingSignalPrompt = ai.definePrompt({\n  name: 'tradingSignalPrompt',\n  input: {schema: GenerateTradingSignalInputSchema},\n  output: {schema: GenerateTradingSignalOutputSchema},\n  tools: [search],\n  system: `You are a world-class AI financial advisor. Analyze the market data for the given symbol and timeframe, and generate a potential trading signal.\n\n  Use the search tool to get up-to-date information about the trading symbol.\n  \n  Your analysis should include:\n  1. A clear trend prediction (e.g., Bullish, Bearish, Neutral).\n  2. An analysis of the order book sentiment (e.g., \"Significant buy pressure noted\", \"Sell walls are forming\").\n  3. Identification of key support and resistance levels from the order book.\n  4. A concise trading signal (e.g., \"Potential long entry\", \"Consider short position\", \"Hold and observe\").\n\n  Respond using markdown. Always include a risk warning.`,\n  prompt: `Analyze the market for symbol {{{symbol}}} on the {{{timeframe}}} timeframe. Provide a trend prediction, order book analysis, support/resistance levels, and a trading signal.\n`,\n});\n\nconst generateTradingSignalFlow = ai.defineFlow(\n  {\n    name: 'generateTradingSignalFlow',\n    inputSchema: GenerateTradingSignalInputSchema,\n    outputSchema: GenerateTradingSignalOutputSchema,\n  },\n  async input => {\n    const searchResult = await search({\n      query: `current news for ${input.symbol}`,\n    });\n\n    const {output} = await tradingSignalPrompt({\n      ...input,\n    });\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACjC;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1B;IACE,MAAM;IACN,aAAa;IACb,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B;IACA,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;AACxB,GACA,OAAM;IACJ,kDAAkD;IAClD,iEAAiE;IACjE,OAAO,CAAC,mBAAmB,EAAE,MAAM,KAAK,CAAC,8BAA8B,CAAC;AAC1E;AAGF,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC1C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,OAAO;QAAC;KAAO;IACf,QAAQ,CAAC;;;;;;;;;;wDAU6C,CAAC;IACvD,QAAQ,CAAC;AACX,CAAC;AACD;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,eAAe,MAAM,OAAO;QAChC,OAAO,CAAC,iBAAiB,EAAE,MAAM,MAAM,EAAE;IAC3C;IAEA,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,oBAAoB;QACzC,GAAG,KAAK;IACV;IACA,OAAO;AACT;;;IAvDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { generateTradingSignal } from '@/ai/flows/generate-trading-signal';\n\nexport async function getAiTradingSignal(symbol: string, timeframe: string) {\n  try {\n    const result = await generateTradingSignal({ symbol, timeframe });\n    return { success: true, analysis: result.analysis };\n  } catch (error) {\n    console.error('Error generating AI trading signal:', error);\n    return { success: false, error: 'Failed to generate AI signal. Please try again.' };\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEO,eAAe,mBAAmB,MAAc,EAAE,SAAiB;IACxE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;YAAE;YAAQ;QAAU;QAC/D,OAAO;YAAE,SAAS;YAAM,UAAU,OAAO,QAAQ;QAAC;IACpD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uCAAuC;QACrD,OAAO;YAAE,SAAS;YAAO,OAAO;QAAkD;IACpF;AACF;;;IARsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getAiTradingSignal as '60c6125dbbad3595350503c517b30b35b439281e36'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}