from collections.abc import Callable

__all__ = ['DsaKey', 'construct', 'generate', 'import_key']

RNG = Callable[[int], bytes]

class DsaKey:
    def __init__(self, key_dict: dict[str, int]) -> None: ...
    def has_private(self) -> bool: ...
    def can_encrypt(self) -> bool: ...  # legacy
    def can_sign(self) -> bool: ...     # legacy
    def public_key(self) -> DsaKey: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __getstate__(self) -> None: ...
    def domain(self) -> tuple[int, int, int]: ...
    def __repr__(self) -> str: ...
    def __getattr__(self, item: str) -> int: ...
    def export_key(self, format: str | None="PEM", pkcs8: bool | None=None, passphrase: str | None=None,
                  protection: str | None=None, randfunc: RNG | None=None) -> bytes: ...
    # Backward-compatibility
    exportKey = export_key
    publickey = public_key

def generate(bits: int, randfunc: RNG | None=None, domain: tuple[int, int, int] | None=None) -> DsaKey: ...
def construct(tup: tuple[int, int, int, int] | tuple[int, int, int, int, int], consistency_check: bool | None=True) -> DsaKey: ...
def import_key(extern_key: str | bytes, passphrase: str | None=None) -> DsaKey: ...
# Backward compatibility
importKey = import_key

oid: str
