from collections.abc import Callable

__all__ = ['ElGamalKey', 'construct', 'generate']

RNG = Callable[[int], bytes]

def generate(bits: int, randfunc: RNG) -> ElGamalKey: ...
def construct(tup: tuple[int, int, int] | tuple[int, int, int, int]) -> ElGamalKey: ...

class ElGamalKey:
    def __init__(self, randfunc: RNG | None=None) -> None: ...
    def has_private(self) -> bool: ...
    def can_encrypt(self) -> bool: ...
    def can_sign(self) -> bool: ...
    def publickey(self) -> ElGamalKey: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __getstate__(self) -> None: ...
