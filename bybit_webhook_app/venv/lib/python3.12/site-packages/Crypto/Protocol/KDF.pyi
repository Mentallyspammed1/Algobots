from collections.abc import Callable
from types import ModuleType
from typing import Any
from typing import Literal
from typing import overload

Buffer=bytes|bytearray|memoryview

RNG = Callable[[int], bytes]
PRF = Callable[[bytes, bytes], bytes]

def PBKDF1(password: str, salt: bytes, dkLen: int, count: int | None=1000, hashAlgo: ModuleType | None=None) -> bytes: ...
def PBKDF2(password: str, salt: bytes, dkLen: int | None=16, count: int | None=1000, prf: RNG | None=None, hmac_hash_module: ModuleType | None=None) -> bytes: ...

class _S2V:
    def __init__(self, key: bytes, ciphermod: ModuleType, cipher_params: dict[Any, Any] | None=None) -> None: ...

    @staticmethod
    def new(key: bytes, ciphermod: ModuleType) -> None: ...
    def update(self, item: bytes) -> None: ...
    def derive(self) -> bytes: ...

def _HKDF_extract(salt: Buffer, ikm: Buffer, hashmod: ModuleType) -> bytes: ...
def _HKDF_expand(prk: Buffer, info: Buffer, L: int, hashmod) -> bytes : ...
def HKDF(master: bytes, key_len: int, salt: bytes, hashmod: ModuleType, num_keys: int | None=1, context: bytes | None=None) -> bytes | tuple[bytes, ...]: ...

def scrypt(password: str, salt: str, key_len: int, N: int, r: int, p: int, num_keys: int | None=1) -> bytes | tuple[bytes, ...]: ...

def _bcrypt_decode(data: bytes) -> bytes: ...
def _bcrypt_hash(password:bytes , cost: int, salt: bytes, constant:bytes, invert:bool) -> bytes: ...
def bcrypt(password: bytes | str, cost: int, salt: bytes | None=None) -> bytes: ...
def bcrypt_check(password: bytes | str, bcrypt_hash: bytes | bytearray | str) -> None: ...

@overload
def SP800_108_Counter(master: Buffer,
                      key_len: int,
                      prf: PRF,
                      num_keys: Literal[None] = None,
                      label: Buffer = b'', context: Buffer = b'') -> bytes: ...

@overload
def SP800_108_Counter(master: Buffer,
                      key_len: int,
                      prf: PRF,
                      num_keys: int,
                      label: Buffer = b'', context: Buffer = b'') -> tuple[bytes]: ...
