from collections.abc import Callable
from typing import TypedDict

from typing_extensions import NotRequired

class PbesError(ValueError):
    ...

class PBES1:
    @staticmethod
    def decrypt(data: bytes, passphrase: bytes) -> bytes: ...

class ProtParams(TypedDict):
    iteration_count: NotRequired[int]
    salt_size: NotRequired[int]
    block_size: NotRequired[int]
    parallelization: NotRequired[int]

class PBES2:
    @staticmethod
    def encrypt(data: bytes,
                passphrase: bytes,
                protection: str,
                prot_params: ProtParams | None = ...,
                randfunc: Callable[[int], bytes] | None = ...) -> bytes: ...

    @staticmethod
    def decrypt(data:bytes, passphrase: bytes) -> bytes: ...
