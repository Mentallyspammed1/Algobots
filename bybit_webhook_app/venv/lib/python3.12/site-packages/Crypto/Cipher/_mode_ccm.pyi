from types import ModuleType
from typing import Union
from typing import overload

Buffer = Union[bytes, bytearray, memoryview]

__all__ = ['CcmMode']


class CCMMessageTooLongError(ValueError):
    pass


class CcmMode:
    block_size: int
    nonce: bytes

    def __init__(self,
                 factory: ModuleType,
                 key: Buffer,
                 nonce: Buffer,
                 mac_len: int,
                 msg_len: int | None,
                 assoc_len: int | None,
                 cipher_params: dict) -> None: ...

    def update(self, assoc_data: Buffer) -> CcmMode: ...

    @overload
    def encrypt(self, plaintext: Buffer) -> bytes: ...
    @overload
    def encrypt(self, plaintext: Buffer, output: bytearray | memoryview) -> None: ...
    @overload
    def decrypt(self, plaintext: Buffer) -> bytes: ...
    @overload
    def decrypt(self, plaintext: Buffer, output: bytearray | memoryview) -> None: ...

    def digest(self) -> bytes: ...
    def hexdigest(self) -> str: ...
    def verify(self, received_mac_tag: Buffer) -> None: ...
    def hexverify(self, hex_mac_tag: str) -> None: ...

    @overload
    def encrypt_and_digest(self,
                           plaintext: Buffer) -> tuple[bytes, bytes]: ...
    @overload
    def encrypt_and_digest(self,
                           plaintext: Buffer,
                           output: Buffer) -> tuple[None, bytes]: ...
    def decrypt_and_verify(self,
                           ciphertext: Buffer,
                           received_mac_tag: Buffer,
                           output: bytearray | memoryview | None = ...) -> bytes: ...
