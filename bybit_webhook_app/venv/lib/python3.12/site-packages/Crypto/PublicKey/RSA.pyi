from collections.abc import Callable
from typing import Literal
from typing import Union
from typing import overload

from Crypto.IO._PBES import ProtParams
from Crypto.Math.Numbers import Integer

__all__ = [
    'RsaKey',
    'construct',
    'generate',
    'import_key',
    'oid',
]

RNG = Callable[[int], bytes]

class RsaKey:
    def __init__(self, **kwargs: int) -> None: ...

    @property
    def n(self) -> int: ...
    @property
    def e(self) -> int: ...
    @property
    def d(self) -> int: ...
    @property
    def p(self) -> int: ...
    @property
    def q(self) -> int: ...
    @property
    def u(self) -> int: ...
    @property
    def invp(self) -> int: ...
    @property
    def invq(self) -> int: ...

    def size_in_bits(self) -> int: ...
    def size_in_bytes(self) -> int: ...
    def has_private(self) -> bool: ...
    def can_encrypt(self) -> bool: ...  # legacy
    def can_sign(self) -> bool:...     # legacy
    def public_key(self) -> RsaKey: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __getstate__(self) -> None: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...

    @overload
    def export_key(self,
                   format: str | None="PEM",
                   passphrase: str | None=None,
                   pkcs: int | None=1,
                   protection: str | None=None,
                   randfunc: RNG | None=None
                   ) -> bytes: ...
    @overload
    def export_key(self, *,
                   format: str | None="PEM",
                   passphrase: str,
                   pkcs: Literal[8],
                   protection: str,
                   randfunc: RNG | None=None,
                   prot_params: ProtParams,
                   ) -> bytes: ...

    # Backward compatibility
    exportKey = export_key
    publickey = public_key

Int = Union[int, Integer]

def generate(bits: int, randfunc: RNG | None=None, e: int | None=65537) -> RsaKey: ...
def construct(rsa_components: tuple[Int, Int] | tuple[Int, Int, Int] | tuple[Int, Int, Int, Int, Int] | tuple[Int, Int, Int, Int, Int, Int], #  n, e, d, p, q, crt_q
              consistency_check: bool | None=True) -> RsaKey: ...
def import_key(extern_key: str | bytes, passphrase: str | None=None) -> RsaKey: ...

# Backward compatibility
importKey = import_key

oid: str
