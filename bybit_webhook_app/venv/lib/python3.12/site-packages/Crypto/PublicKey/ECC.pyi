from __future__ import annotations

from collections.abc import Callable
from typing import Any
from typing import Literal
from typing import NamedTuple
from typing import overload

from typing_extensions import NotRequired
from typing_extensions import TypedDict
from typing_extensions import Unpack

from Crypto.IO._PBES import ProtParams
from Crypto.Math.Numbers import Integer

from ._point import EccPoint as EccPoint
from ._point import EccXPoint as EccXPoint

RNG = Callable[[int], bytes]


class UnsupportedEccFeature(ValueError):
    ...

class ExportParams(TypedDict):
    passphrase: NotRequired[bytes | str]
    use_pkcs8: NotRequired[bool]
    protection: NotRequired[str]
    compress: NotRequired[bool]
    prot_params: NotRequired[ProtParams]


class EccKey:
    curve: str
    def __init__(self, *, curve: str = ..., d: int = ..., point: EccPoint = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __repr__(self) -> str: ...
    def has_private(self) -> bool: ...
    @property
    def d(self) -> int: ...
    @property
    def pointQ(self) -> EccPoint: ...
    def public_key(self) -> EccKey: ...

    @overload
    def export_key(self,
                   *,
                   format: Literal['PEM', 'OpenSSH'],
                   **kwargs: Unpack[ExportParams]) -> str: ...

    @overload
    def export_key(self,
                   *,
                   format: Literal['DER', 'SEC1', 'raw'],
                   **kwargs: Unpack[ExportParams]) -> bytes: ...


class _Curve(NamedTuple):
    p: Integer
    order: Integer
    b: Integer
    Gx: Integer
    Gy: Integer
    G: EccPoint
    modulus_bits: int
    oid: str
    context: Any
    desc: str
    openssh: str | None

_curves: dict[str, _Curve]

def _import_rfc5915_der(encoded: bytes,
                        passphrase: str | None = None,
                        curve_oid: str | None = None) -> EccKey: ...

def generate(**kwargs: str | RNG) -> EccKey: ...
def construct(**kwargs: str | int) -> EccKey: ...


def import_key(encoded: bytes | str,
               passphrase: str | None = None,
               curve_name: str | None = None) -> EccKey: ...


def _import_ed25519_public_key(encoded: bytes) -> EccKey: ...
def _import_ed448_public_key(encoded: bytes) -> EccKey: ...
