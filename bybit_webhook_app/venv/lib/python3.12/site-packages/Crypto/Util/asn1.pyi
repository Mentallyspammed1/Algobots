from collections.abc import Iterable
from collections.abc import Sequence
from typing import Union

__all__ = [
    'DerBitString',
    'DerInteger',
    'DerNull',
    'DerObject',
    'DerObjectId',
    'DerOctetString',
    'DerSequence',
    'DerSetOf',
]

# TODO: Make the encoded DerObjects their own type, so that DerSequence and
# DerSetOf can check their contents better

class BytesIO_EOF:
    def __init__(self, initial_bytes: bytes) -> None: ...
    def set_bookmark(self) -> None: ...
    def data_since_bookmark(self) -> bytes: ...
    def remaining_data(self) -> int: ...
    def read(self, length: int) -> bytes: ...
    def read_byte(self) -> bytes: ...

class DerObject:
    payload: bytes
    def __init__(self, asn1Id: int | None=None, payload: bytes | None=..., implicit: int | None=None,
                 constructed: bool | None=False, explicit: int | None=None) -> None: ...
    def encode(self) -> bytes: ...
    def decode(self, der_encoded: bytes, strict: bool=...) -> DerObject: ...

class DerInteger(DerObject):
    value: int
    def __init__(self, value: int | None= 0, implicit: int | None=None, explicit: int | None=None) -> None: ...
    def encode(self) -> bytes: ...
    def decode(self, der_encoded: bytes, strict: bool=...) -> DerInteger: ...

class DerBoolean(DerObject):
    value: bool
    def __init__(self, value: bool=..., implicit: int | bytes | None=..., explicit: int | bytes | None=...) -> None: ...
    def encode(self) -> bytes: ...
    def decode(self, der_encoded: bytes, strict: bool=...) -> DerBoolean: ...

class DerSequence(DerObject):
    def __init__(self, startSeq: Sequence[int | DerInteger | DerObject] | None=None, implicit: int | None=None) -> None: ...
    def __delitem__(self, n: int) -> None: ...
    def __getitem__(self, n: int) -> None: ...
    def __setitem__(self, key: int, value: DerObject) -> None: ...
    def __setslice__(self, i: int, j: int, sequence: Sequence) -> None: ...
    def __delslice__(self, i: int, j: int) -> None: ...
    def __getslice__(self, i: int, j: int) -> DerSequence: ...
    def __len__(self) -> int: ...
    def __iadd__(self, item: DerObject) -> DerSequence: ...
    def append(self, item: DerObject) -> DerSequence: ...
    def hasInts(self, only_non_negative: bool | None=True) -> int: ...
    def hasOnlyInts(self, only_non_negative: bool | None=True) -> bool: ...
    def encode(self) -> bytes: ...
    def decode(self, der_encoded: bytes, strict: bool=..., nr_elements: int | None=None, only_ints_expected: bool | None=False) -> DerSequence: ...

class DerOctetString(DerObject):
    payload: bytes
    def __init__(self, value: bytes | None=..., implicit: int | None=None) -> None: ...

class DerNull(DerObject):
    def __init__(self) -> None: ...

class DerObjectId(DerObject):
    value: str
    def __init__(self, value: str | None=..., implicit: int | None=None, explicit: int | None=None) -> None: ...
    def encode(self) -> bytes: ...
    def decode(self, der_encoded: bytes, strict: bool=...) -> DerObjectId: ...

class DerBitString(DerObject):
    value: bytes
    def __init__(self, value: bytes | None=..., implicit: int | None=None, explicit: int | None=None) -> None: ...
    def encode(self) -> bytes: ...
    def decode(self, der_encoded: bytes, strict: bool=...) -> DerBitString: ...

DerSetElement = Union[bytes, int]

class DerSetOf(DerObject):
    def __init__(self, startSet: set[DerSetElement] | None=None, implicit: int | None=None) -> None: ...
    def __getitem__(self, n: int) -> DerSetElement: ...
    def __iter__(self) -> Iterable: ...
    def __len__(self) -> int: ...
    def add(self, elem: DerSetElement) -> None: ...
    def decode(self, der_encoded: bytes, strict: bool=...) -> DerObject: ...
    def encode(self) -> bytes: ...
