from collections.abc import Callable

def ceil_div(n: int, d: int) -> int: ...
def size (N: int) -> int: ...
def getRandomInteger(N: int, randfunc: Callable | None=None) -> int: ...
def getRandomRange(a: int, b: int, randfunc: Callable | None=None) -> int: ...
def getRandomNBitInteger(N: int, randfunc: Callable | None=None) -> int: ...
def GCD(x: int,y: int) -> int: ...
def inverse(u: int, v: int) -> int: ...
def getPrime(N: int, randfunc: Callable | None=None) -> int: ...
def getStrongPrime(N: int, e: int | None=0, false_positive_prob: float | None=1e-6, randfunc: Callable | None=None) -> int: ...
def isPrime(N: int, false_positive_prob: float | None=1e-6, randfunc: Callable | None=None) -> bool: ...
def long_to_bytes(n: int, blocksize: int | None=0) -> bytes: ...
def bytes_to_long(s: bytes) -> int: ...
def long2str(n: int, blocksize: int | None=0) -> bytes: ...
def str2long(s: bytes) -> int: ...

sieve_base: list[int]
