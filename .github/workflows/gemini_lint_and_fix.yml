name: Code Quality and Auto-Fix with Gemini

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8 black google-generativeai

    - name: Run Linters
      id: lint
      run: |
        # Run multiple linters and capture output, ensuring the step doesn't fail on linting errors
        pylint_output=$(pylint **/*.py || true)
        flake8_output=$(flake8 . || true)
        
        # Save linter outputs to files for analysis
        echo "$pylint_output" > pylint_report.txt
        echo "$flake8_output" > flake8_report.txt

    - name: Analyze Linter Results with Gemini
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        python - << EOF
        import os
        import google.generativeai as genai

        # Configure the Gemini API client
        genai.configure(api_key=os.environ['GEMINI_API_KEY'])
        model = genai.GenerativeModel('gemini-pro')

        # Read the linter reports from the files
        try:
            with open('pylint_report.txt', 'r') as f:
                pylint_report = f.read()
        except FileNotFoundError:
            pylint_report = "Pylint report not found."

        try:
            with open('flake8_report.txt', 'r') as f:
                flake8_report = f.read()
        except FileNotFoundError:
            flake8_report = "Flake8 report not found."

        # If both reports are empty or non-existent, exit gracefully
        if not pylint_report.strip() and not flake8_report.strip():
            print("No linting issues found. Nothing to analyze.")
            with open('gemini_code_suggestions.md', 'w') as f:
                f.write("No linting issues found.")
            exit()

        # Construct the prompt for Gemini
        prompt = f"""
        As an expert Python developer, analyze the following linter reports. 
        Provide specific, actionable code fixes for each issue. 
        For each suggestion, specify the file and line number.
        Present the output in clear, well-formatted Markdown.

        Pylint Report:
        ```
        {pylint_report}
        ```
        
        Flake8 Report:
        ```
        {flake8_report}
        ```
        """

        # Invoke the model
        response = model.generate_content(prompt)
        
        # Save the suggestions to a Markdown file
        with open('gemini_code_suggestions.md', 'w') as f:
            f.write(response.text)
        
        print("Gemini analysis complete. Suggestions saved to gemini_code_suggestions.md")
        EOF

    - name: Apply Black Formatting
      run: |
        black .

    - name: Commit and Push Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check if there are any changes to commit
        if [[ -n $(git status -s) ]]; then
          git add .
          git commit -m "style: Auto-apply black formatting and fix lint issues"
          echo "Changes committed. Pushing to origin..."
          git push
        else
          echo "No changes to commit."
        fi

    - name: Create PR Comment with Gemini Suggestions
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const suggestions = fs.readFileSync('gemini_code_suggestions.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `### 🧙‍♂️ Pyrmethus's Code Altar (Gemini Analysis) ✨

Here are the code quality suggestions forged from the digital ether:

${suggestions}`
          });

